// Project Euler Problem: 011

// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
// ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred 
// divisors?

// Completed 2016/05/12

// Notes: This problem is a great example of why we need to write efficient
// algorithms. When things scale up, if your algorithm isn't efficient, you're
// in trouble.

public class Euler011 {
    public static void main(String[] args) {
        int numFactors;
        long triangle = 1L;
        for (int i = 2; i < 2000000000; i++) {
            triangle += (long)i;
            // Don't check odd nums.
            if (triangle % 2 != 0) {
                continue;
            }
            numFactors = 0;
            for (int j = 1; j <= (int)Math.sqrt(triangle); j++) {
                if (triangle % j == 0) {
                    numFactors++;
                    if (j != Math.sqrt(triangle)) {
                        numFactors++;
                    }
                }
                if (numFactors > 500) {
                    System.out.println("Result: " + triangle);
                    System.exit(1);
                }
            }
        }
    }
}